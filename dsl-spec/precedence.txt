{
    4 +  let a: b =  c =  d + 2   ;
    4 + (let a: b = (c = (d + 2)));

    if a  4+5 ;
    if a (4+5);

    5 +  if (a)  b - 2  else  c + 6;
    5 + (if (a) (b - 2) else (c + 6));

     let x =  macro hi { f(x) + 5 }   ; f;
    (let x = (macro hi { f(x) + 5 } )); f;

     if (a) b;  c;
    (if (a) b); c;

    // This is illegal, makes no sense
    if (a) let x = 5;

    if (a) match "hei" => it.last else match "hallo" => it.last;
    if (a) (match "hei" => it.last) else (match "hallo" => it.last);

    if (a) search {"hei", else => abort} else print("Wowzers")
}

This gives the following ordering, from least to highest precedence

statement_list(0): ;
statement(1): LET MUT

expression(4): ending_in_expr
5 =
6 == !=
7 < <= > >=
8 + -
9 * /
10 unary -
TYPE
11 . and function callee
12 {} () IDENTIFIER NUMBER STRING REF_STRING REGEX MACRO ENDINGINEXPR

The number tells us what an expressionX can contain (note how bodies can jump back up)
